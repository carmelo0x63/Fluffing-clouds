
[Safely Drain a Node](https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/)
drain the node:
```
kubectl drain --ignore-daemonsets <node name>
```

put the node back in service:
```
kubectl uncordon <node name>
```




$ sudo kubectl get pods -o wide --all-namespaces
NAMESPACE     NAME                    READY   STATUS    RESTARTS   AGE     IP       NODE     NOMINATED NODE   READINESS GATES
kube-system   helm-install-traefik-dlxtj                0/1     Pending   0          2m44s   <none>   <none>   <none>           <none>
kube-system   coredns-854c77959c-nqhdc                  0/1     Pending   0          2m43s   <none>   <none>   <none>           <none>
kube-system   metrics-server-86cbb8457f-kkm9l           0/1     Pending   0          2m43s   <none>   <none>   <none>           <none>
kube-system   local-path-provisioner-7c458769fb-thzh4   0/1     Pending   0          2m43s   <none>   <none>   <none>           <none>

sudo kubectl --namespace kube-system logs <pod_name>

mkdir .kube
scp pi@10.0.2.91:.kube/config .kube/config
sudo ln -s /usr/local/bin/k3s /usr/local/bin/kubectl
export KUBECONFIG=.kube/config
kubectl get pods -o wide                        
NAME        READY   STATUS    RESTARTS   AGE   IP          NODE                   NOMINATED NODE   READINESS GATES
hello-pod   1/1     Running   1          13h   10.42.2.4   pico2.ext.network.mw   <none>           <none>





kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1

kubectl get deployments -o wide


===
kubectl proxy
===


curl http://localhost:8001/version

export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}') && echo $POD_NAME

kubectl describe pods


???
curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/
???



kubectl logs $POD_NAME


#kubectl exec $POD_NAME env

#kubectl exec -ti $POD_NAME bash

#cat server.js

#curl localhost:8080

#exit



kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080

kubectl describe services/kubernetes-bootcamp


export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}') && echo NODE_PORT=$NODE_PORT


pi@uk3s1:~ $ kubectl apply -f K3s/goweb/goweb-pod.yaml
pod/goweb-pod created

pi@uk3s1:~ $ kubectl exec --stdin --tty goweb-pod -- netstat -tulpn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 :::8080                 :::*                    LISTEN      1/main.go

pi@uk3s1:~ $ kubectl get pods goweb-pod -o wide
NAME        READY   STATUS    RESTARTS   AGE     IP          NODE               NOMINATED NODE   READINESS GATES
goweb-pod   1/1     Running   0          3m12s   10.42.2.7   uk3s3.network.mw   <none>           <none>

pi@uk3s1:~ $ curl http://10.42.2.7:8080/Hello\!
This is goweb-pod running on linux/arm saying: Hello!





pi@uk3s1:~ $ kubectl apply -f K3s/goweb/goweb-svc.yaml
service/goweb-svc configured

pi@uk3s1:~ $ kubectl get all -o wide
NAME            READY   STATUS    RESTARTS   AGE   IP          NODE               NOMINATED NODE   READINESS GATES
pod/goweb-pod   1/1     Running   0          11m   10.42.2.7   uk3s3.network.mw   <none>           <none>

NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE   SELECTOR
service/kubernetes   ClusterIP   10.43.0.1      <none>        443/TCP        23h   <none>
service/goweb-svc    NodePort    10.43.206.10   <none>        80:31234/TCP   82s   version=v1,zone=prod

pi@uk3s1:~ $ curl http://127.0.0.1:31234/Hello\!
This is goweb-pod running on linux/arm saying: Hello!

pi@uk3s1:~ $ curl http://10.0.2.96:31234/Hello\!		<<< any of the cluster servers' IPs
This is goweb-pod running on linux/arm saying: Hello!




kubectl expose pod podinfo --port=9898 --type=NodePort

kubectl exec --stdin --tty podinfo -- /bin/bash


kubectl apply -f challenges/ingress3.yaml
kubectl apply -f challenges/pod2.yaml
kubectl apply -f challenges/pod3.yaml
kubectl apply -f challenges/pod.yaml
kubectl apply -f challenges/sa.yaml
kubectl apply -f challenges/service3.yaml
kubectl apply -f deployment.yaml
kubectl apply -f deployment.yaml && kubectl apply -f service.yaml && kubectl apply -f ingress.yaml
kubectl apply -f deployment.yaml && kubectl apply -f service.yaml&& kubectl apply -f ingress.yaml
kubectl apply -f deployment.yaml service.yaml ingress.yaml
kubectl apply --filename ingress.yaml
kubectl apply -f ing3.yaml
kubectl apply -f ing4_v1beta1.yaml
kubectl apply -f ing4_v1.yaml
kubectl apply -f ing4.yaml
kubectl apply -f ingress3.yaml
kubectl apply -f ingress.yaml
kubectl apply -f kube
kubectl apply -f kube/namespace.yaml
kubectl apply -f lab1.yaml
kubectl apply -f lab2.yaml
kubectl apply -f lab3.yaml
kubectl apply -f lab4.yaml
kubectl apply -f lab5.yaml
kubectl apply -f namespace.yaml
kubectl apply -f sa.yaml
kubectl apply -f service3.yaml
kubectl apply -f svc3.yaml
kubectl apply -f svc4.yaml
kubectl cluster-info
kubectl config get-context
kubectl config get-contexts
kubectl config -h
kubectl config --kubeconfig=.kube/config use-context
kubectl config --kubeconfig=.kube/config use-context default
kubectl config --kubeconfig=.kube/config view
kubectl config set-context --current --namespace=default
kubectl config set-context --current --namespace=first-k8s-app
kubectl config set-context --current --namespace=k8s-api-v3
kubectl config set-context --current --namespace=k8s-app-v1
kubectl config set-context --current --namespace=k8s-app-v2
kubectl delete deployment first-deployment
kubectl delete -f .
kubectl delete -f challenges/pod2.yaml
kubectl delete -f challenges/pod3.yaml
kubectl delete -f challenges/pod.yaml
kubectl delete -f deployment.yaml
kubectl delete -f ing3.yaml
kubectl delete -f ing4_v1beta1.yaml
kubectl delete -f ing4_v1.yaml
kubectl delete -f ing4.yaml
kubectl delete -f kube
kubectl delete -f kube --namespace=first-k8s-app
kubectl delete -f lab1
kubectl delete -f lab1.yaml
kubectl delete -f lab2.yaml
kubectl delete -f lab3.yaml
kubectl delete -f _lab4.yaml
kubectl delete -f lab4.yaml
kubectl delete -f service3.yaml
kubectl delete -f svc3.yaml
kubectl delete -f svc4.yaml
kubectl delete kube
kubectl delete learnk8s
kubectl delete pod first-k8s-app-64c9d656f5-d8btq --namespace=first-k8s-app
kubectl delete pod podinfo
kubectl delete pods first-deployment-7454cf57c8-hspxs
kubectl delete pods first-deployment-7454cf57c8-px4c7
kubectl delete pods first-deployment-7454cf57c8-zfkkm
kubectl delete pods first-k8s-app-64c9d656f5-d8btq
kubectl delete pods first-k8s-app-64c9d656f5-d8btq --namespace=first-k8s-app
kubectl delete pods learnk8s
kubectl delete pods podinfo
kubectl delete services app
kubectl delete services podinfo
kubectl describe deployments first-deployment
kubectl describe deployments lab4
kubectl describe ingresses ing4
kubectl describe ingress ing3
kubectl describe ingress ingress3
kubectl describe ingress podinfo
kubectl describe ingress podinfo | head
kubectl describe pod lab3
kubectl describe pod podinfo
kubectl describe pod podinfo | head
kubectl describe pods lab1
kubectl describe pods lab3
kubectl describe pods podinfo
kubectl describe service podinfo
kubectl describe service podinfo | head
kubectl describe services svc3
kubectl describe services svc4
kubectl describe service svcinternet
kubectl exec hello-pod -- bash
kubectl exec hello-pod -- ps aux
kubectl exec hello-pod -- sh
kubectl exec --help
kubectl exec podinfo -- /bin/sh
kubectl exec podinfo /bin/sh
kubectl exec podinfo -- ps aux
kubectl exec --stdin --tty first-deployment-7454cf57c8-5n4tl -- netstat -tulpn
kubectl exec --stdin --tty first-deployment-7454cf57c8-ljf2r -- netstat -tulpn
kubectl exec --stdin --tty first-deployment-79bb55d88b-8h8wj -- netstat -tulpn
kubectl exec --stdin --tty first-deployment-79bb55d88b-fkncm -- netstat -tulpn
kubectl exec --stdin --tty first-k8s-app-64c9d656f5-m2v88 -- /bin/sh
kubectl exec --stdin --tty first-k8s-app-64c9d656f5-m2v88 -- netstat -tulpn
kubectl exec --stdin --tty podinfo -- /bin/sh
kubectl exec --stdin --tty podinfo -- netstat -tulpn
kubectl exec --stdin --tty podinfo -- ps aux
kubectl exec --stdin --tty podinfo -- ps -ef
kubectl exec --stdin --tty podinfo -- ps -elf
kubectl exec --stdin --tty pod/lab2 -- cat /app/well_done.txt
kubectl exec --stdin --tty pod/lab2 -- ls /app
kubectl exec --stdin --tty pod/lab3 -- /bin/bash
kubectl exec --stdin --tty pod/lab4-54b5b57d79-qnlzk -- /bin/bash
kubectl exec --stdin --tty pod/podinspect -- /bin/
kubectl exec --stdin --tty pod/podinspect -- /bin/bash
kubectl exec --stdin --tty pod/podinspect -- /bin/sh
kubectl exec --stdin --tty pod/podinspect -- cat /app/well_done.txt
kubectl exec --stdin --tty pod/podinternet -- /bin/bash
kubectl explain ingress.apiversion --recursive
kubectl explain ingress.apiVersion --recursive
kubectl explain ingress.spec.rules
kubectl explain ingress.spec.rules.http
kubectl explain ingress.spec.rules.http.paths
kubectl explain ingress.spec.rules.http.paths --recursive
kubectl explain pod.spec.containers
kubectl explain service.spec.ports
kubectl get all -o wide
kubectl get all -o wide --all-namespaces
kubectl get all -o wide --all-namespaces | grep -i ingress
kubectl get all -o wide --all-namespaces | grep ingress
kubectl get all -o wide --all-namespaces | grep podinfo
kubectl get all -o wide --namespace=default
kubectl get all -o wide --namespace=first-k8s-app
kubectl get all -o wide --namespace=k8s-api-v3
kubectl get all -o wide --namespace=k8s-app-v1
kubectl get all -o wide --namespace=k8s-app-v2
kubectl get --help
kubectl get ingress
kubectl get ingress app -o wide
kubectl get ingresses ing3
kubectl get ingress first-k8s-app -o json
kubectl get ingress first-k8s-app -o=jsonpath='{.spec}'
kubectl get ingress first-k8s-app -o wide
kubectl get ingress k8s-app-v1 --namespace=k8s-app-v1 -o=jsonpath='{.spec}'
kubectl get ingress k8s-app-v1 -o=jsonpath='{.spec}'
kubectl get ingress -o wide
kubectl get ingress podinfo
kubectl get ingress podinfo -o=jsonpath='{.spec}'
kubectl get ingress podinfo -o wide
kubectl get ingress podinfo -o wide --all-namespaces
kubectl get ingress podinfo -o yaml
kubectl get namespaces
kubectl get node -o wide
kubectl get nodes -o wide
kubectl get pods
kubectl get pods --all-namespaces
kubectl get pods first-k8s-app-64c9d656f5-d8btq -o=jsonpath='{.spec.containers[0].ports[0]}'
kubectl get pods first-k8s-app-64c9d656f5-m2v88 -o=jsonpath='{.spec.containers[0].ports[0]}'
kubectl get pods first-k8s-app -o=jsonpath='{.spec.containers[0].ports[0]}'
kubectl get pods k8s-app-v1-5db74cdbf4-vvdjp --namespace=k8s-app-v1 -o=jsonpath='{.spec.containers[0].ports[0]}'\n
kubectl get pods lab3 -o=jsonpath='{.spec.containers[0].ports[0]}'
kubectl get pods --namespace first-k8s-app
kubectl get pods -o wide
kubectl get pods podinfo
kubectl get pods podinfo -o=jsonpath='{.spec}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers[0]}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers[0].name}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers[0].ports}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers[0].ports[0]}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers.name}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers.ports}'
kubectl get pods podinfo -o=jsonpath='{.spec.containers.ports[0]}'
kubectl get pods podinfo -o=jsonpath='{.spec.ports[0]}'
kubectl get pods podinfo --output yaml
kubectl get pods podinfo -o wide
kubectl get pods podinfo -o yaml
kubectl get pods podinfo -o yaml | grep -i port
kubectl get pods --watch
kubectl get services
kubectl get services first-k8s-app -o=jsonpath='{.spec.ports[0]}'
kubectl get services k8s-app-v1 --namespace=k8s-app-v1 -o=jsonpath='{.spec}'
kubectl get services k8s-app-v1 --namespace=k8s-app-v1 -o=jsonpath='{.spec.ports[0]}'
kubectl get services -o wide
kubectl get services podinfo
kubectl get services podinfo -o=jsonpath='{.spec.ports[0]}'
kubectl get services podinfo --output yaml
kubectl get services podinfo -o yaml
kubectl get services podinfo -o yaml | grep -i port
kubectl get services service3 -o=jsonpath='{.spec.ports[0]}'
kubectl get services svc3 -o=jsonpath='{.spec.ports[0]}'
kubectl get services svcinternet -o=jsonpath='{.spec.ports[0]}'
kubectl logs lab1
kubectl logs lab2
kubectl logs lab3
kubectl logs lab4-54b5b57d79-5dfll
kubectl logs lab4-54b5b57d79-cdc4m
kubectl logs lab4-54b5b57d79-qnlzk
kubectl logs lab4-59bbd87995-qmzs5
kubectl logs lab4-59bbd87995-tmlm2
kubectl logs lab5
kubectl logs lab5a
kubectl logs lab5 lab5a
kubectl logs lab5 lab5b
kubectl logs learnk8s
kubectl logs podcreate
kubectl logs podinfo
kubectl logs podinspect
kubectl logs podinternet
kubectl options
kubectl run learnk8s --restart=Never --image=learnk8s/fundamentals:pod --port=9899
kubectl run podinfo --restart=Never --image=learnk8s/fundamentals:pod --port=9899
kubectl run podinfo --restart=Never --image=stefanprodan/podinfo --port=9898
kubectl run --restart=Never --image=gcr.io/kuar-demo/kuard-amd64:blue kuard
kubectl scale --replicas=5 deployment first-deployment
kubectl top node
kubectl version
kubectl version --client



sudo raspi-config
sudo poweroff
alias
iptables -V
iptables-legacy -v
iptables-legacy -V
systemctl status k3s
systemctl start k3s
systemctl status k3s
sudo sed -i "s/rootwait/rootwait cgroup_memory=1 cgroup_enable=memory/" /boot/cmdline.txt
sudo reboot
export INSTALL_K3S_VERSION=v1.20.4+k3s1
curl -sfL https://get.k3s.io | sh -
kubectl version
kubectl cluster-info
kubectl get nodes -o wide
sudo cat /var/lib/rancher/k3s/server/node-token
kubectl get nodes -o wide
kubectl get all -o wide
kubectl get nodes -o wide
kubectl config view
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
kubectl config view
kubectl get all -o wide
kubectl config view
kubectl get all -o wide
kubectl get all -o wide
clear
kubectl get all -o wide
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
kubectl get all -o wide
kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get pods -o wide
mkdir .kube
touch .kube/config
sudo cp /etc/rancher/k3s/k3s.yaml .kube/config
kubectl get all -o wide
unset KUBECONFIG
kubectl get all -o wide
rm -rf .kube/
sudo cp /etc/rancher/k3s/k3s.yaml .kube/config
mkdir .kube && sudo cp /etc/rancher/k3s/k3s.yaml .kube/config
sudo systemctl status k3s
sudo systemctl restart k3s
env | grep KUBE
kubectl get all -o wide
chmod 644 /etc/rancher/k3s/k3s.yaml
sudo chmod 644 /etc/rancher/k3s/k3s.yaml
rm -rf .kube/
kubectl get all -o wide
mkdir -p K3s/goweb
vi K3s/goweb/apiVersion: v1
vi K3s/goweb/goweb-pod.yaml
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl get all -o wide
vi K3s/goweb/goweb-pod.yaml
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl get all -o wide
kubectl get pods --watch
kubectl delete -f K3s/goweb/goweb-pod.yaml
vi K3s/goweb/goweb-pod.yaml
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl get pods --watch
kubectl get all -o wide
ip a
kubectl get all -o wide
kubectl logs goweb-pod
kubectl describe pods goweb-pod
curl http://10.42.1.4:8080
kubectl get all -o wide
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
kubectl get all -o wide
sudo systemctl status k3s
sudo vi /etc/systemd/system/k3s.service
sudo vi /etc/systemd/system/k3s.service
sudo systemctl restart k3s
sudo systemctl daemon-reload
sudo systemctl restart k3s
sudo systemctl status k3s
sudo vi /etc/systemd/system/k3s.service
sudo systemctl daemon-reload
sudo systemctl restart k3s
sudo systemctl status k3s
kubectl get all -o wide
kubectl describe pods goweb-pod
curl http://10.42.1.4:8080
curl http://10.42.1.6:8080
kubectl exec --stdin --tty goweb-pod -- /bin/bash
kubectl exec --stdin --tty goweb-pod -- /bin/sh
curl http://10.42.1.6:8080/Hello\!
kubectl expose pod goweb-pod --port=8080 --type=NodePort
kubectl get all -o wide
curl http://127.0.0.1:30774/Hello\!
kubectl exec --stdin --tty goweb-pod -- netstat -tulpn
kubectl get all -o wide
kubectl delete service goweb-pod
kubectl get all -o wide
kubectl get all -o wide
kubectl get nodes -o wide
sudo reboot
cat K3s/goweb/goweb-pod.yaml
kubectl get pods -o wide
kubectl exec --stdin --tty goweb-pod -- hostname
kubectl describe pods goweb-pod
cat K3s/goweb/goweb-pod.yaml
kubectl describe pods goweb-pod
vi K3s/goweb/goweb-pod.yaml
kubectl exec --stdin --tty goweb-pod -- netstat -tulpn
kubectl get pods -o wide
curl http://10.42.1.10:8080/Hello\!
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl delete -f K3s/goweb/goweb-pod.yaml
cat K3s/goweb/goweb-pod.yaml
vi K3s/goweb/goweb-svc.yaml
kubectl get all -o wide
vi K3s/dashboard.admin-user.yml
vi K3s/dashboard.admin-user-role.yml
sudo cat /etc/systemd/system/k3s.service
kubectl version
kubectl get all -o wide
kubectl apply -f K3s/dashboard.admin-user -f K3s/dashboard.admin-user-role.yml
kubectl apply -f K3s/dashboard.admin-user.yml -f K3s/dashboard.admin-user-role.yml
GITHUB_URL=https://github.com/kubernetes/dashboard/releases
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/${VERSION_KUBE_DASHBOARD}/aio/deploy/recommended.yaml
kubectl apply -f K3s/dashboard.admin-user.yml -f K3s/dashboard.admin-user-role.yml
kubectl -n kubernetes-dashboard describe secret admin-user-token | grep ^token
kubectl proxy &
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl get all -o wide
kubectl exec --stdin --tty goweb-pod -- netstat -tulpn
kubectl describe pods goweb-pod
kubectl get pods goweb-pod -o=jsonpath='{.spec.containers[0].ports[0]}'
kubectl get pods goweb-pod -o=jsonpath='{.spec.containers[0]}'
kubectl get pods goweb-pod -o=jsonpath='{.spec'
kubectl get pods goweb-pod -o=jsonpath='{.spec}'
kubectl get pods goweb-pod -o=jsonpath='{.}'
kubectl get pods goweb-pod -o wide
curl http://10.42.2.7:8080/Hello\!
kubectl apply -f K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
kubectl get all -o wide
kubectl describe pods goweb-pod
kubectl describe services goweb-svc
curl http://127.0.0.1/Hello\!
kubectl get all -o wide
kubectl delete -f K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
kubectl get all -o wide
vi K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
kubectl get all -o wide
kubectl get all -o wide
vi K3s/goweb/goweb-pod.yaml
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl get all -o wide
kubectl get pods -o wide
kubectl describe pods goweb-pod
kubectl describe services goweb-svc
vi K3s/goweb/goweb-pod.yaml
vi K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
kubectl get all -o wide
kubectl describe pods goweb-pod
kubectl describe services goweb-svc
cat K3s/goweb/goweb-pod.yaml
cat K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-pod.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-pod.yaml
vi K3s/goweb/goweb-pod.yaml
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl get all -o wide
kubectl get all -o wide
kubectl delete -f K3s/goweb/goweb-pod.yaml
kubectl delete -f K3s/goweb/goweb-svc.yaml
sudo apt update && sudo apt dist-upgrade -y
sudo raspi-config
kubectl get nodes -o wide
kubectl get pods --watch
kubectl get all -o wide
kubectl get nodes -o wide
/usr/local/bin/k3s-uninstall.sh
export INSTALL_K3S_VERSION=v1.20.4+k3s1
curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" sh -
sudo systemctl status k3s
sudo vi /etc/systemd/system/k3s.service
sudo systemctl daemon-reload
sudo systemctl restart k3s
sudo systemctl status k3s
kubectl get nodes -o wide
kubectl version
sudo kubectl cluster-info
kubectl cluster-info
kubectl get nodes -o wide
vi .bash_history
sudo cat /var/lib/rancher/k3s/server/node-token
vi .bash_history
vi .bash_history
kubectl get nodes --watch
kubectl get nodes -o wide
kubectl get all -o wide
kubectl apply -f K3s/goweb/goweb-pod.yaml
kubectl exec --stdin --tty goweb-pod -- netstat -tulpn
kubectl get pods --watch
kubectl exec --stdin --tty goweb-pod -- netstat -tulpn
kubectl get pods -o wide
curl http://10.42.2.2:8080/Hello\!
kubectl apply -f K3s/goweb/goweb-svc.yaml
kubectl get all -o wide
vi .bash_history
vi K3s/goweb/goweb-dep.yaml
cat K3s/goweb/goweb-pod.yaml
cat K3s/goweb/goweb-dep.yaml
kubectl get all -o wide
curl http://10.0.2.96:31234/Hello\!
vi K3s/goweb/goweb-dep.yaml
cat K3s/goweb/goweb-pod.yaml
cat K3s/goweb/goweb-dep.yaml
cat K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-dep.yaml
kubectl get all -o wide
kubectl apply -f K3s/goweb/goweb-dep.yaml
kubectl get all -o wide
curl http://10.0.2.96:31234/Hello\!
curl http://10.0.2.96:8080/Hello\!
curl http://10.0.2.96/Hello\!
curl http://10.0.2.96:31234/Hello\!
kubectl get all -o wide
grep 31234 .bash_history
sed -i "/31234/d" .bash_history
grep 31234 .bash_history
kubectl --help
vi K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-dep.yaml
kubectl apply -f K3s/goweb/goweb-dep.yaml
curl http://10.0.2.96:31234/Hello\!
vi K3s/goweb/goweb-dep.yaml
kubectl apply -f K3s/goweb/goweb-dep.yaml
curl http://10.0.2.96:31234/Hello\!
kubectl delete -f K3s/goweb/goweb-pod.yaml
kubectl delete pods goweb-dep-785b47dbc6-bj2k5
kubectl delete pods goweb-dep-785b47dbc6-5qlxk
kubectl delete -f K3s/goweb/goweb-dep.yaml
kubectl delete -f K3s/goweb/goweb-svc.yaml
kubectl get pods --watch
kubectl get nodes -o wide
kubectl apply -f K3s/goweb/goweb-dep.yaml
kubectl get pods --watch
kubectl exec --stdin --tty goweb-dep-785b47dbc6-rdgzz -- netstat -tulpn
curl http://10.42.1.7:8080/Hello\!
curl http://10.42.2.6:8080/Hello\!
vi K3s/goweb/goweb-dep.yaml
kubectl apply -f K3s/goweb/goweb-dep.yaml
kubectl get pods --watch
kubectl apply -f K3s/goweb/goweb-svc.yaml
curl http://127.0.0.1:31234/Hello\!
curl http://10.0.2.96:31234/Hello\!
watch -d -n2 "curl http://10.0.2.96:31234/Hello\!"
man curl
watch -d -n2 "curl -s http://10.0.2.96:31234/Hello\!"
cat K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-ing.yaml
vi K3s/goweb/goweb-dep.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
kubectl apply -f K3s/goweb/goweb-dep.yaml
curl http://10.0.2.96:31234/Hello\!
curl http://10.0.2.96/Hello\!
kubectl apply -f K3s/goweb/goweb-ing.yaml
kubectl get ingress --help
curl http://10.0.2.96/Hello\!
curl http://10.0.2.96/app/Hello\!
kubectl describe ingress goweb-ing
kubectl describe services goweb-svc
cat K3s/goweb/goweb-svc.yaml
cat K3s/goweb/goweb-ing.yaml
ip a
vi .bash_history
kubectl config view
find / -type f -name config 2>/dev/null | grep -v proc
kubectl get nodes -o wide
find / -name "*k3s*" 2>/dev/null | grep -v proc
file /etc/rancher/k3s/k3s.yaml
cat /etc/rancher/k3s/k3s.yaml
kubectl get nodes -o wide
/usr/local/bin/k3s-uninstall.sh
sudo iptables -F
cat /boot/cmdline.txt
sudo vi /boot/cmdline.txt
clear
cat /boot/cmdline.txt
vi .bash_history
clear && cat /boot/cmdline.txt
export INSTALL_K3S_VERSION=v1.20.4+k3s1
curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" sh -
cat /etc/systemd/system/k3s.service
sudo echo "    --write-kubeconfig-mode 644" >> /etc/systemd/system/k3s.service
sudo -s echo "    --write-kubeconfig-mode 644" >> /etc/systemd/system/k3s.service
sudo -i echo "    --write-kubeconfig-mode 644" >> /etc/systemd/system/k3s.service
sudo su -
sudo systemctl daemon-reload
sudo systemctl restart k3s
sudo vi /etc/systemd/system/k3s.service
sudo systemctl daemon-reload
sudo systemctl restart k3s
kubectl
kubectl cluster-info
sudo cat /var/lib/rancher/k3s/server/node-token
clear
/usr/local/bin/k3s-uninstall.sh
sudo reboot
export INSTALL_K3S_VERSION=v1.20.4+k3s1
curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" sh -
sudo vi /etc/systemd/system/k3s.service
sudo systemctl daemon-reload
sudo systemctl restart k3s
kubectl config view
find / -type f -name config 2>/dev/null | grep -v proc
find / -type f -exec grep "server: https://127.0.0.1:6443" {} \; 2>/dev/null
man grep
vi .bash_history
find / -type f -exec grep -H "server: https://127.0.0.1:6443" {} \; 2>/dev/null
rm -rf .kube/
cat /etc/systemd/system/k3s.service
sudo systemctl status k3s
sudo cat /var/lib/rancher/k3s/server/node-token
ip a
clear
kubectl get nodes -o wide
sudo vi /etc/rancher/k3s/k3s.yaml
kubectl config view
kubectl config --help
ssh-copy-id pi@10.0.2.91
ssh-keygen -t rsa
ssh-copy-id pi@10.0.2.91
vi .bash_history
cat .ssh/id_rsa.pub
vi .ssh/authorized_keys
tar -czf K3s.tgz K3s/
scp K3s.tgz pi@10.0.2.91:
rm K3s.tgz
kubectl apply -f K3s/goweb/goweb-dep.yaml
kubectl apply -f K3s/goweb/goweb-svc.yaml
vi K3s/goweb/goweb-dep.yaml
kubectl apply -f K3s/goweb/goweb-dep.yaml
kubectl get nodes -o wide
export INSTALL_K3S_VERSION=v1.20.5+k3s1
sudo cat /etc/systemd/system/k3s.service
curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" sh -
sudo cat /etc/systemd/system/k3s.service
sudo vi /etc/systemd/system/k3s.service
sudo systemctl daemon-reload
sudo systemctl restart k3s
sudo systemctl status k3s
sudo cat /var/lib/rancher/k3s/server/node-token
cat K3s/goweb/goweb-pod.yaml
cat K3s/goweb/goweb-dep.yaml
cd K3s/
mkdir guestbook
mkdir stateless_app
cd stateless_app/
vi apiVersion: apps/v1
kubectl get deployments hello-world
kubectl describe deployments hello-world
kubectl get replicasets
kubectl describe replicasets
kubectl get services my-service
kubectl describe services my-service
curl http://10.0.2.96:30442
ip a
curl http://10.0.2.96:8080
curl http://10.0.2.96:30442
kubectl get all -o wide
curl http://10.0.2.96:31234/Hello\!
curl http://10.0.2.96:30442
kubectl delete service my-service
kubectl get all -o wide
cd ..
cd guestbook/
vi mongo-dep.yaml
kubectl apply -f ~/K3s/guestbook/mongo-dep.yaml
kubectl get pods --watch
vi mongo-dep.yaml
kubectl get pods --watch
kubectl get all -o wide
kubectl delete pod mongo-75f59d57f4-8lhrn
kubectl apply -f ~/K3s/guestbook/mongo-dep.yaml
kubectl get pods --watch
kubectl apdeletef ~/K3s/guestbook/mongo-dep.yaml
kubectl delete ~/K3s/guestbook/mongo-dep.yaml
kubectl delete -f ~/K3s/guestbook/mongo-dep.yaml
vi mongo-dep.yaml
cat /proc/cpuinfo
sudo apt search mongo
cd ..
kubectl get all -o wide
kubectl delete -f ~/K3s/goweb/goweb-svc.yaml
kubectl delete -f ~/K3s/goweb/goweb-dep.yaml
kubectl get all -o wide
uname -a
kubectl get all -o wide
kubectl get nodes -o wide
cat /etc/os-release
uname -a
kubectl get nodes -o wide
kubectl get all -o wide
history
